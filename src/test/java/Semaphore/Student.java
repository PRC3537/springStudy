package Semaphore;import org.apache.commons.lang3.RandomUtils;import java.util.concurrent.Semaphore;import java.util.concurrent.TimeUnit;import java.util.logging.Logger;/** * @program: spring-demo * @description: 打饭学生 * @author: gonghuihui * @create: 2019-03-21 16:25 **/public class Student implements Runnable {    private static final Logger LOGGER = (Logger) Logger.getLogger(String.valueOf(Student.class));    private String name;    private Semaphore semaphore;    /*    打饭方式：    0 一直等待到打到饭    1 等了一会儿不耐烦了，回宿舍吃泡面了    2 打饭途中被同学叫走了， 不再等待     */    private int type;    public Student(String name, Semaphore semaphore, int type) {        this.name = name;        this.semaphore = semaphore;        this.type = type;    }    /*    打饭     */    @Override    public void run() {        // 根据打饭情形分别进行不同的处理        switch (type) {            // 这个同学有耐心，他会一直等到打到饭            case 0:                // 排队                semaphore.acquireUninterruptibly();                // 进行打饭                try {                    Thread.sleep(RandomUtils.nextLong(1000, 3000));                } catch (InterruptedException e) {                    e.printStackTrace();                }                // 将打饭机会留给后面的同学                semaphore.release();                // 打到饭了                LOGGER.info(name + "终于打到饭了。");                break;            // 这个同学没有耐心，等了1000毫秒没达到饭，就回宿舍泡面了            case 1:                // 排队                try {                    // 如果等待超时，则不再等待，回宿舍吃泡面                    if (semaphore.tryAcquire(RandomUtils.nextInt(6000, 16000), TimeUnit.MILLISECONDS)) {                        // 进行打饭                        try {                            Thread.sleep(RandomUtils.nextLong(1000, 3000));                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        // 打饭的机会留给后面的同学                        semaphore.release();                        // 打到了饭                        LOGGER.info(name + "终于打到了饭。");                    } else {                        // 回宿舍吃泡面                        LOGGER.info(name + "回宿舍吃泡面。");                    }                } catch (InterruptedException e) {                    e.printStackTrace();                }                break;            // 这个学生也很有耐心，但是他们班突然宣布聚餐，他只能放弃打饭了            case 2:                // 排队                try {                    semaphore.acquire();                    // 进行打饭                    try {                        Thread.sleep(RandomUtils.nextLong(1000, 3000));                    } catch (InterruptedException e) {//                        e.printStackTrace();                    }                    // 将打饭机会让给了后面的同学                    semaphore.release();                    // 打到了饭                    LOGGER.info(name + "终于打到了饭。");                } catch (InterruptedException e) {//                    e.printStackTrace();                    LOGGER.info(name + "全班聚餐，不再打饭。");                }                break;            default:                break;        }    }}