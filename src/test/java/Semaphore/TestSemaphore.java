package Semaphore;import org.junit.jupiter.api.Test;import java.util.concurrent.Semaphore;/** * @program: spring-demo * @description: Semaphore练习 * @author: gonghuihui * @create: 2019-03-19 09:59 **/public class TestSemaphore {    @Test    public void testSemaphore() throws InterruptedException {        Semaphore semaphore = new Semaphore(5);//        Semaphore semaphore = new Semaphore(5,true);        System.out.println("是否公平FIFO: " + semaphore.isFair());        System.out.println("获取当前可用的许可证数量: " + semaphore.availablePermits());        semaphore.acquire();  // 获取一个许可证        System.out.println("获取当前可用的许可证数量: " + semaphore.availablePermits());        semaphore.release();  // 释放一个许可证        System.out.println("获取当前可用的许可证数量: " + semaphore.availablePermits());        semaphore.acquire(2);        System.out.println("获取当前可用的许可证数量: " + semaphore.availablePermits());        semaphore.release(2);        System.out.println("获取当前可用的许可证数量: " + semaphore.availablePermits());        System.out.println("正在等待的队列长度（线程数量）: " + semaphore.getQueueLength());        Thread.sleep(10);        System.out.println();        // 定义final的信号量        final Semaphore finalSemaphore = semaphore;        new Thread(() -> {            int permits = finalSemaphore.drainPermits();            System.out.println(Thread.currentThread().getName() + "获取了剩余的全部" + permits + "个许可证");            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                e.printStackTrace();            }            finalSemaphore.release(permits);            System.out.println(Thread.currentThread().getName() + "释放了" + permits + "个许可证.");        }).start();        Thread.sleep(10);        System.out.println("获取当前可用的许可证数量：drain 剩余的---" + finalSemaphore.availablePermits());        new Thread(() -> {            try {                finalSemaphore.acquire(2);                System.out.println(Thread.currentThread().getName() + "获取了2个许可证");            } catch (InterruptedException e) {                e.printStackTrace();            }            finalSemaphore.release(2);            System.out.println(Thread.currentThread().getName() + "释放了2个许可证.");        }).start();        Thread.sleep(10);        System.out.println("获取当前可用的许可证数量：drain 剩余的---" + finalSemaphore.availablePermits());        System.out.println("是否有正在等待许可证的线程：" + finalSemaphore.hasQueuedThreads());        System.out.println("正在等待许可证的队列长度(线程数量)：" + finalSemaphore.getQueueLength());        Thread.sleep(5000);  // 这里有玄机        System.out.println();        System.out.println("获取当前可用的许可证数量：---" + finalSemaphore.availablePermits());        System.out.println("是否有正在等待许可证的线程：" + finalSemaphore.hasQueuedThreads());        System.out.println("正在等待许可证的队列长度(线程数量)：" + finalSemaphore.getQueueLength());    }}