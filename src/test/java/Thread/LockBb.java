package Thread;import java.util.Date;import java.util.concurrent.TimeUnit;/** * @program: spring-demo * @description: * @author: gonghuihui * @create: 2019-03-18 14:46 **/public class LockBb implements Runnable {    @Override    public void run() {        try {            System.out.println(new Date().toString() + " LockB 开始执行");            if (TestUnlock.a2.tryAcquire(1, TimeUnit.SECONDS)) {                System.out.println(new Date().toString() + " LockB 锁住 obj2");                if (TestUnlock.a1.tryAcquire(1, TimeUnit.SECONDS)) {                    System.out.println(new Date().toString() + " LockB 锁住 obj1");                } else {                    System.out.println(new Date().toString() + " LockB 锁 obj1 失败");                }            } else {                System.out.println(new Date().toString() + " LockB 锁 obj2 失败");            }            TestUnlock.a1.release();            TestUnlock.a2.release();            Thread.sleep(10 * 1000);  // 这里只是为了演示，所以tryAcquire只用1秒，而且B要给A让出执行时间，否则两个永远是死锁        } catch (InterruptedException e) {            e.printStackTrace();        }    }}